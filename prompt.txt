You are given a competitive programming problem in markdown. based on this problem, please create the following tools in order to test students' source codes against a set of strong test cases. 

* Test case generator:

- It uses the testlib.h library developed for Codeforces
- The generator must be written in C++ 17
- Use argvs for parameters, cout for printing

Here is an example based on another problem which should be your model

#include "testlib.h"
#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
using namespace std;
 
// This generator expects three command-line parameters:
//   argv[1] : n (the size of the array)
//   argv[2] : mode (one of: "rand", "incr", "decr", "equal", "two", "alternating", "zigzag")
//   argv[3] : M (the maximum value allowed, a positive integer)
 
int main(int argc, char* argv[]){
    // Register generator (seed taken from command-line if provided)
    registerGen(argc, argv, 1);
    if(argc < 4){
        cerr << "Usage: " << argv[0] << " n mode M\n";
        return 1;
    }
    int n = atoi(argv[1]);
    string mode = argv[2];
    long long M = atoll(argv[3]);
 
    // Output format: first line is T (# test cases). We output one test case per file.
    cout << 1 << "\n";
    cout << n << "\n";
    vector<long long> a(n);
 
    if(mode == "rand"){
        // Completely random numbers in [1, M].
        for (int i = 0; i < n; i++){
            a[i] = rnd.next(1LL, M);
        }
    }
    else if(mode == "incr"){
        // Nearly increasing sequence from 1 to M.
        if(n == 1) a[0] = 1;
        else {
            for (int i = 0; i < n; i++){
                // use integer interpolation; ensure last is M and first is 1.
                a[i] = 1 + (long long)( (M - 1) * i / (n - 1) );
            }
        }
    }
    else if(mode == "decr"){
        // Nearly decreasing from M down to 1.
        if(n == 1) a[0] = M;
        else {
            for (int i = 0; i < n; i++){
                a[i] = M - (long long)((M - 1) * i / (n - 1));
            }
        }
    }
    else if(mode == "equal"){
        // All entries equal. Choose one random number in [1, M] and fill.
        long long x = rnd.next(1LL, M);
        for (int i = 0; i < n; i++){
            a[i] = x;
        }
    }
    else if(mode == "two"){
        // Only two distinct values: 1 and 2.
        for (int i = 0; i < n; i++){
            a[i] = rnd.next(1, 2);
        }
    }
    else if(mode == "alternating"){
        // Alternate between M and 1.
        for (int i = 0; i < n; i++){
            a[i] = (i % 2 == 0 ? M : 1);
        }
    }
    else if(mode == "zigzag"){
        // Starting with a random number then force peaks and valleys.
        // For even indices, use a high value; for odd, use a low value.
        for (int i = 0; i < n; i++){
            if(i % 2 == 0)
                a[i] = M;
            else
                a[i] = 1;
        }
        // Optionally, introduce a little randomness.
        for (int i = 0; i < n; i++){
            if(rnd.next(0, 1)) { // coin toss; if true, perturb a little within a small range.
                long long delta = rnd.next(0LL, min((long long)100, M-1));
                if(i % 2 == 0)
                    a[i] = max(1LL, M - delta);
                else
                    a[i] = 1 + delta;
            }
        }
    }
    else{
        // Unknown mode; default to random.
        for (int i = 0; i < n; i++){
            a[i] = rnd.next(1LL, M);
        }
    }
 
    // Output the array, space-separated.
    for (int i = 0; i < n; i++){
        cout << a[i] << (i+1 < n ? " " : "\n");
    }
 
    return 0;
}

* Validator for validating the tests generated
* Test case parameters which can be used by the testcase generator aforementioned

* A batch file for windows that runs the generator for all test cases

Here is a model for the batch file

REM generate_tests.bat
REM Assumes that generator.exe is built and available in the same folder.
REM Each command runs the generator with a specific parameter set and redirects output to testXX.in.

@echo off
echo Generating test cases...

generator.exe 1 equal 1 > test01.in
generator.exe 2 rand 100 > test02.in
generator.exe 5 rand 10 > test03.in
generator.exe 10 incr 100 > test04.in
generator.exe 10 decr 100 > test05.in
generator.exe 10 two 2 > test06.in
generator.exe 11 alternating 1000 > test07.in
generator.exe 50 rand 10000 > test08.in
generator.exe 100 rand 1000000000 > test09.in
generator.exe 200 equal 50 > test10.in
generator.exe 300 rand 1000 > test11.in
generator.exe 400 incr 1000000000 > test12.in
generator.exe 500 decr 1000000000 > test13.in
generator.exe 600 rand 5000 > test14.in
generator.exe 700 two 2 > test15.in
generator.exe 800 alternating 1000000000 > test16.in
generator.exe 1000 rand 100000 > test17.in
generator.exe 5000 rand 1000000000 > test18.in
generator.exe 10000 rand 1000000000 > test19.in
generator.exe 15000 rand 100000 > test20.in
generator.exe 20000 rand 1000000000 > test21.in
generator.exe 50000 rand 1000000000 > test22.in
generator.exe 100000 zigzag 1000000000 > test23.in
generator.exe 150000 rand 1000000000 > test24.in
generator.exe 200000 rand 1000000000 > test25.in

echo All tests generated.

The test cases generated must be comprehensive, cover all possible corner cases and include tests with maximum parameters for the input constraints as well as smaller tests (prioritize larger test cases). 
Generate a set of 25 test case parameters which can be used by the generator. the pattern for test case names should be test01.in, test02.in etc. 

Below you get the task attached